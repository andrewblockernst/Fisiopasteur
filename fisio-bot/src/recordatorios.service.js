import { obtenerNotificacionesPendientes, marcarNotificacionEnviada, marcarNotificacionFallida } from './supabase.service.js'

/**
 * Procesar recordatorios pendientes desde Supabase
 * Esta funci√≥n se ejecuta autom√°ticamente cada minuto
 * @param {Function} enviarMensaje - Funci√≥n para enviar mensajes (telefono, mensaje) => Promise
 */
export async function procesarRecordatoriosPendientes(enviarMensaje) {
  try {
    console.log('üîç Revisando recordatorios pendientes...')
    
    // Obtener notificaciones pendientes desde Supabase
    const notificaciones = await obtenerNotificacionesPendientes()
    
    if (!notificaciones || notificaciones.length === 0) {
      console.log('‚úÖ No hay recordatorios pendientes')
      return
    }

    console.log(`üìã Encontradas ${notificaciones.length} notificaciones pendientes`)

    // Procesar cada notificaci√≥n
    for (const notificacion of notificaciones) {
      try {
        await procesarNotificacionIndividual(enviarMensaje, notificacion)
      } catch (error) {
        console.error(`‚ùå Error procesando notificaci√≥n ${notificacion.id_notificacion}:`, error)
        await marcarNotificacionFallida(notificacion.id_notificacion)
      }
    }

    console.log('‚úÖ Procesamiento de recordatorios completado')
    
    // Contar los resultados
    let enviadas = 0
    let fallidas = 0
    
    for (const notificacion of notificaciones) {
      // Verificar en la base de datos el estado final
      // Por ahora asumiremos que se procesaron correctamente
      enviadas++
    }
    
    return {
      procesadas: notificaciones.length,
      enviadas,
      fallidas
    }
  } catch (error) {
    console.error('‚ùå Error general procesando recordatorios:', error)
    return {
      procesadas: 0,
      enviadas: 0,
      fallidas: 0
    }
  }
}

/**
 * Procesar una notificaci√≥n individual
 */
async function procesarNotificacionIndividual(enviarMensaje, notificacion) {
  console.log(`üì® Procesando notificaci√≥n ${notificacion.id_notificacion}`)
  
  if (!notificacion.turno) {
    console.log(`‚ö†Ô∏è Notificaci√≥n ${notificacion.id_notificacion} no tiene turno asociado`)
    await marcarNotificacionFallida(notificacion.id_notificacion)
    return
  }

  const turno = notificacion.turno
  const paciente = turno.paciente
  
  // Verificar que tenemos los datos necesarios
  if (!paciente || !paciente.telefono) {
    console.log(`‚ö†Ô∏è Turno ${turno.id_turno} no tiene datos de paciente o tel√©fono`)
    await marcarNotificacionFallida(notificacion.id_notificacion)
    return
  }

  // Formatear n√∫mero de tel√©fono
  const telefono = formatearTelefono(paciente.telefono)
  if (!telefono) {
    console.log(`‚ö†Ô∏è Tel√©fono inv√°lido para paciente: ${paciente.telefono}`)
    await marcarNotificacionFallida(notificacion.id_notificacion)
    return
  }

  // Crear mensaje de recordatorio
  const mensaje = crearMensajeRecordatorio(turno)
  
  try {
    // Enviar mensaje a trav√©s de la funci√≥n de env√≠o
    await enviarMensaje(telefono, mensaje)
    console.log(`‚úÖ Recordatorio enviado a ${paciente.nombre} ${paciente.apellido} (${telefono})`)
    
    // Marcar como enviada
    await marcarNotificacionEnviada(notificacion.id_notificacion)
    
  } catch (error) {
    console.error(`‚ùå Error enviando recordatorio:`, error)
    await marcarNotificacionFallida(notificacion.id_notificacion)
  }
}

/**
 * Formatear n√∫mero de tel√©fono para WhatsApp
 */
function formatearTelefono(telefono) {
  if (!telefono) return null
  
  try {
    // Remover espacios, guiones, par√©ntesis y cualquier car√°cter no num√©rico excepto +
    let numero = telefono.toString().replace(/[^\d+]/g, '')
    
    // Remover el + inicial si existe
    if (numero.startsWith('+')) {
      numero = numero.substring(1)
    }
    
    console.log(`üì± Procesando tel√©fono: ${telefono} -> ${numero}`)
    
    // Validar que tenemos un n√∫mero
    if (!numero || numero.length < 10) {
      console.log(`‚ùå N√∫mero demasiado corto: ${numero}`)
      return null
    }
    
    let numeroFinal = numero
    
    // Si no empieza con 54 (c√≥digo de Argentina), y es un n√∫mero de 10 d√≠gitos, agregar 549
    if (!numero.startsWith('54') && numero.length === 10) {
      numeroFinal = '549' + numero
    }
    // Si empieza con 54 pero no con 549, agregar el 9
    else if (numero.startsWith('54') && !numero.startsWith('549') && numero.length === 12) {
      numeroFinal = '549' + numero.substring(2)
    }
    // Si ya empieza con 549, usar tal como est√°
    else if (numero.startsWith('549')) {
      numeroFinal = numero
    }
    
    // Validar que el n√∫mero tenga una longitud v√°lida para Argentina
    if (!numeroFinal.startsWith('549')) {
      console.log(`‚ùå N√∫mero no es argentino: ${numeroFinal}`)
      return null
    }
    
    if (numeroFinal.length < 12 || numeroFinal.length > 14) {
      console.log(`‚ùå Longitud de n√∫mero inv√°lida: ${numeroFinal} (${numeroFinal.length} d√≠gitos)`)
      return null
    }
    
    console.log(`üì± N√∫mero final: ${numeroFinal}`)
    
    // Agregar @s.whatsapp.net al final
    return numeroFinal + '@s.whatsapp.net'
    
  } catch (error) {
    console.error(`‚ùå Error formateando tel√©fono ${telefono}:`, error)
    return null
  }
}

/**
 * Crear mensaje de recordatorio personalizado
 */
function crearMensajeRecordatorio(turno) {
  const fechaFormateada = formatearFecha(turno.fecha)
  const horaFormateada = formatearHora(turno.hora)
  
  return `üè• *Recordatorio de Turno - FisioPasteur*

üëã Hola ${turno.paciente.nombre}!

üìÖ Te recordamos tu turno programado para:
üóìÔ∏è **Fecha:** ${fechaFormateada}
üïê **Hora:** ${horaFormateada}
üë®‚Äç‚öïÔ∏è **Especialista:** Dr./Dra. ${turno.especialista.nombre} ${turno.especialista.apellido}
ü©∫ **Especialidad:** ${turno.especialidad.nombre}

üìã *Importante:*
‚Ä¢ Llega 10 minutos antes de tu turno
‚Ä¢ Trae tu documentaci√≥n
‚Ä¢ Si necesitas reagendar, cont√°ctanos cuanto antes

¬øPodr√°s asistir a tu turno?
Responde *SI* para confirmar o *NO* si necesitas reprogramar.

¬°Te esperamos! üòä`
}

/**
 * Formatear fecha para mostrar
 */
function formatearFecha(fecha) {
  try {
    const fechaObj = new Date(fecha)
    return fechaObj.toLocaleDateString('es-AR', {
      weekday: 'long',
      year: 'numeric',
      month: 'long',
      day: 'numeric'
    })
  } catch (error) {
    return fecha
  }
}

/**
 * Formatear hora para mostrar
 */
function formatearHora(hora) {
  try {
    // Si la hora viene como "14:30:00", extraer solo "14:30"
    if (hora.includes(':')) {
      const partes = hora.split(':')
      return `${partes[0]}:${partes[1]}`
    }
    return hora
  } catch (error) {
    return hora
  }
}

/**
 * Iniciar el sistema de recordatorios autom√°ticos
 */
export function iniciarSistemaRecordatorios(enviarMensaje) {
  console.log('üöÄ Iniciando sistema de recordatorios autom√°ticos...')
  
  // Ejecutar inmediatamente
  procesarRecordatoriosPendientes(enviarMensaje)
  
  // Ejecutar cada minuto
  setInterval(() => {
    procesarRecordatoriosPendientes(enviarMensaje)
  }, 60000) // 60 segundos
  
  console.log('‚úÖ Sistema de recordatorios iniciado - procesar√° cada 60 segundos')
}